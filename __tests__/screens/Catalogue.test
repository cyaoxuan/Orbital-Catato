import { cleanup, render } from "@testing-library/react-native";
import Catalogue from "../../app/screens/main/catalogue/Catalogue";

afterEach(cleanup);

jest.mock("expo-router", () => ({
    useNavigation: () => ({
        navigate: jest.fn(),
    }),
}));

jest.mock("../../app/utils/db/cat", () => ({
    useGetAllCats: () => {
        return {
            getAllCats: jest.fn(),
            allCats: [
                {
                    catID: 1,
                    name: "Kitty",
                    photoURLs: [
                        require("../../assets/testing-cats/cat-2-1.jpg"),
                        require("../../assets/testing-cats/cat-2-1.jpg"),
                    ],
                },
                {
                    catID: 2,
                    name: "Skitty",
                    photoURLs: [
                        require("../../assets/testing-cats/cat-2-1.jpg"),
                    ],
                },
                {
                    catID: 3,
                    name: "Mitty",
                },
            ],
            loading: [],
            error: [],
        };
    },
}));

jest.mock("../../app/utils/db/user", () => ({
    useGetUserByID: () => {
        return {
            getUserByID: jest.fn(),
            user: {
                catsFollowed: [1, 3],
            },
        };
    },
}));

jest.mock("../../app/utils/context/auth", () => ({
    useAuth: () => {
        return {
            user: {
                uid: 1,
            },
            userRole: {
                isUser: true,
            },
        };
    },
}));

jest.mock("@react-navigation/native", () => ({
    useIsFocused: () => {
        true;
    },
}));

describe("<Catalogue />", () => {
    it("renders catalogue successfully", () => {
        const { getByTestId } = render(<Catalogue />);
        const carousel = getByTestId("catalogue");
        expect(carousel).toBeDefined();
    });

    it("renders catalogue with cat cards correctly", () => {
        const tree = render(<Catalogue />).toJSON();
        expect(tree).toMatchSnapshot();
    });
});
